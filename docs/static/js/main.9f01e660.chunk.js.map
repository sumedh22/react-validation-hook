{"version":3,"sources":["CodeSnippet.jsx","hook.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CodeSnippet","props","input","useRef","React","useState","open","setOpen","message","setMessage","handleClose","event","reason","title","toUpperCase","style","padding","Button","onClick","current","focus","select","document","execCommand","err","console","error","color","text","opacity","ref","defaultValue","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","action","Fragment","size","IconButton","aria-label","fontSize","VALIDATION_TYPES","ERR_MESSAGES","min","max","asyncValidation","asyncFunction","errorMessage","type","regexValidation","pattern","customValidation","syncFunction","requiredValidator","value","context","Error","format","lengthValidator","l","String","length","messages","rangeValidator","regexValidator","RegExp","test","asyncValidator","a","call","customValidator","ctx","Object","keys","forEach","i","replace","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","spacing","paper","textAlign","palette","primary","paperCenter","inline","display","addTripButton","position","right","bottom","Boolean","window","location","hostname","match","ReactDOM","render","classes","validators","prototype","toString","setError","pending","setPending","useEffect","asyncValidate","then","res","Promise","resolve","push","onChange","changeHandler","valueMapper","e","target","useValidator","fetch","response","json","indexOf","Grid","container","item","xs","Paper","className","Typography","gutterBottom","variant","md","List","ListItem","ListItemIcon","ListItemText","secondary","component","TextField","fullWidth","label","helperText","map","idx","key","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f01e660.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport { Button } from \"@material-ui/core\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nconst CodeSnippet = props => {\n  const input = useRef();\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const copy = () => {\n    input.current.focus();\n    input.current.select();\n    try {\n      document.execCommand(\"copy\");\n      setMessage(\"Copied to clipboard\");\n    } catch (err) {\n      console.error(err);\n      setMessage(\"Failed to copy\");\n    } finally {\n      setOpen(true);\n    }\n  };\n  return (\n    <div >\n      <h5>{props.title.toUpperCase()}</h5>\n      <pre style={{ padding: \"1em\" }}>\n        <Button title=\"Copy to Clipboard\" onClick={copy}>\n          <FileCopyIcon color=\"action\" style={{ color: \"white\" }} />\n        </Button>\n        <code>{props.text}</code>\n      </pre>\n      <input\n        style={{ opacity: 0 }}\n        ref={input}\n        defaultValue={props.text}\n      ></input>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        message={message}\n        action={\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              Great!\n            </Button>\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n};\n\nexport default CodeSnippet;\n","import { useState, useEffect } from \"react\";\n//constants\nconst VALIDATION_TYPES = {\n  REQUIRED: \"REQUIRED\",\n  ASYNC: \"ASYNC\",\n  RANGE: \"RANGE\",\n  LENGTH: \"LENGTH\",\n  REGEX: \"REGEX\",\n  CUSTOM: \"CUSTOM\"\n};\n\nconst ERR_MESSAGES = {\n  [VALIDATION_TYPES.REQUIRED]: \"Value is required\",\n  [VALIDATION_TYPES.ASYNC]: \"Error running custom validator with {value}\",\n  [VALIDATION_TYPES.RANGE]: {\n    min: \"Value is less than {min}\",\n    max: \"Value exceeds {max}\"\n  },\n  [VALIDATION_TYPES.LENGTH]: {\n    min: \"Length is less than {min}\",\n    max: \"Length exceeds {max}\"\n  },\n  [VALIDATION_TYPES.REGEX]:\n    \"The value entered ({value}) does not maches the pattern ({pattern})\"\n};\n//Validator constructs\nexport const requiredValidation = errorMessage => ({\n  type: VALIDATION_TYPES.REQUIRED,\n  errorMessage: errorMessage || ERR_MESSAGES[VALIDATION_TYPES.REQUIRED]\n});\nexport const asyncValidation = (asyncFunction, errorMessage) => ({\n  type: VALIDATION_TYPES.ASYNC,\n  errorMessage: errorMessage || ERR_MESSAGES[VALIDATION_TYPES.ASYNC],\n  asyncFunction\n});\nexport const rangeValidation = (min, max, messages) => ({\n  type: VALIDATION_TYPES.RANGE,\n  messages: messages || ERR_MESSAGES[VALIDATION_TYPES.RANGE],\n  min,\n  max\n});\nexport const lengthValidation = (min, max, messages) => ({\n  type: VALIDATION_TYPES.LENGTH,\n  messages: messages || ERR_MESSAGES[VALIDATION_TYPES.LENGTH],\n  min,\n  max\n});\nexport const regexValidation = (pattern, errorMessage) => ({\n  type: VALIDATION_TYPES.REGEX,\n  errorMessage: errorMessage || ERR_MESSAGES[VALIDATION_TYPES.REGEX],\n  pattern\n});\nexport const customValidation = (syncFunction, errorMessage) => ({\n  type: VALIDATION_TYPES.CUSTOM,\n  errorMessage: errorMessage,\n  syncFunction\n});\n\n//hook API\nexport const useValidator = (validators, defaultValue) => {\n  if (Object.prototype.toString.call(validators) !== \"[object Array]\") {\n    throw new Error(\"validators must be an Array\");\n  }\n  if (!validators.length) {\n    throw new Error(\"validators should not be empty Array\");\n  }\n\n  const [error, setError] = useState([]);\n  const [pending, setPending] = useState(false);\n\n  useEffect(() => {\n    setPending(true);\n    asyncValidate(defaultValue).then(res => {\n      setPending(false);\n      setError(res);\n    });\n  }, []);\n\n  const onChange = (changeHandler, valueMapper) => e => {\n    const value = valueMapper ? valueMapper(e) : e.target.value;\n    changeHandler(e);\n    setPending(true);\n    asyncValidate(value).then(res => {\n      setPending(false);\n      setError(res);\n    });\n  };\n\n  const asyncValidate = async value => {\n    const res = [];\n    for (let i = 0; i < validators.length; i++) {\n      let error = \"\";\n      try {\n        switch (validators[i].type) {\n          case VALIDATION_TYPES.REQUIRED:\n            await Promise.resolve(requiredValidator(value, validators[i]));\n            break;\n          case VALIDATION_TYPES.LENGTH:\n            await Promise.resolve(lengthValidator(value, validators[i]));\n            break;\n          case VALIDATION_TYPES.RANGE:\n            await Promise.resolve(rangeValidator(value, validators[i]));\n            break;\n          case VALIDATION_TYPES.ASYNC:\n            await asyncValidator(value, validators[i]);\n            break;\n          case VALIDATION_TYPES.REGEX:\n            await Promise.resolve(regexValidator(value, validators[i]));\n            break;\n          case VALIDATION_TYPES.CUSTOM:\n            await Promise.resolve(customValidator(value, validators[i]));\n            break;\n          default:\n            break;\n        }\n      } catch (e) {\n        error = e.message;\n      } finally {\n        if (error) res.push(error);\n      }\n    }\n    return Promise.resolve(res);\n  };\n\n  return { error, onChange, pending };\n};\n\n//validation handlers\nconst requiredValidator = (value, context) => {\n  if (!value) {\n    throw new Error(format(value, context, context.errorMessage));\n  }\n};\nconst lengthValidator = (value, context) => {\n  const l = String(value || '').length;\n  if (context.min) {\n    if (l < context.min) {\n      throw new Error(format(value, context, context.messages.min));\n    }\n  }\n\n  if (context.max) {\n    if (l > context.max) {\n      throw new Error(format(value, context, context.messages.max));\n    }\n  }\n};\nconst rangeValidator = (value, context) => {\n  if (value < context.min) {\n    throw new Error(format(value, context, context.messages.min));\n  }\n  if (value > context.max) {\n    throw new Error(format(value, context, context.messages.max));\n  }\n};\nconst regexValidator = (value, context) => {\n  if (!new RegExp(context.pattern).test(value)) {\n    throw new Error(format(value, context, context.errorMessage));\n  }\n};\n\nconst asyncValidator = async (value, context) => {\n  await context.asyncFunction.call(this, value, context);\n};\nconst customValidator = async (value, context) => {\n  await context.syncFunction.call(this, value, context);\n};\n\nconst format = (value, context, message) => {\n  const ctx = { ...context, value };\n  Object.keys(ctx).forEach(i => {\n    message = message.replace(`{${i}}`, ctx[i]);\n  });\n  return message;\n};\n","import React from \"react\";\nimport {\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Paper,\n  Typography,\n  makeStyles,\n  ListItemIcon\n} from \"@material-ui/core\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CodeSnippet from \"./CodeSnippet\";\nimport {\n  useValidator,\n  requiredValidation,\n  lengthValidation,\n  asyncValidation,\n  customValidation,\n  regexValidation\n} from \"./hook\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"#f5f5f5\",\n    padding: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"left\",\n    color: theme.palette.text.primary\n  },\n  paperCenter: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.primary\n  },\n  inline: {\n    display: \"block\"\n  },\n  addTripButton: { position: \"fixed\", right: \"15px\", bottom: \"15px\" }\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const asyncFunction = async (value, context) => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/photos\");\n    const res = await response.json();\n    if (value != res.length) {\n      throw new Error(\n        \"Custom Async error when value is not equal to \" +\n          res.length +\n          \" which is the response array length!\"\n      );\n    }\n  };\n\n  const syncFunction = (value, context)=>{\n    if((value || '').indexOf('a') !== -1){\n      throw new Error('Custom error because the input contains \\'a\\' ');\n    }\n  }\n\n  const validators = [\n    requiredValidation(),\n    lengthValidation(2, 5),\n    asyncValidation(asyncFunction),\n    customValidation(syncFunction),\n    regexValidation('^[a-z]+$')\n  ];\n  const { error, onChange, pending } = useValidator(validators);\n\n  const changeHandler = e => {};\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12}>\n        <Paper className={classes.paperCenter}>\n          <Typography gutterBottom variant=\"h2\" color=\"textPrimary\">\n            React Input Validation\n          </Typography>\n          <Typography variant=\"h5\" color=\"textPrimary\">\n            Implement Sync and Async validations using simple hooks! 🎉🎉\n          </Typography>\n        </Paper>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            Features\n          </Typography>\n          <List>\n            <ListItem>\n              <ListItemIcon>\n                <CheckIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Easy to use hook API, Specify a list of validations that should run\"></ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <CheckIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary=\"Supports Asynchronous validations as well.\"\n                secondary={\n                  <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    className={classes.inline}\n                  >\n                    you can have a combination of both sync and async validators\n                  </Typography>\n                }\n              ></ListItemText>\n            </ListItem>\n\n            <ListItem>\n              <ListItemIcon>\n                <CheckIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary=\"Returns a list of formatted error messages for user feedback\"\n                secondary={\n                  <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    className={classes.inline}\n                  >\n                    Specify fetch size, limit and scroller to monitor fetch\n                    behaviour.\n                  </Typography>\n                }\n              ></ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <CheckIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Out of the box support for required, length, range, regular expression and custom async validations\"></ListItemText>\n            </ListItem>\n          </List>\n        </Paper>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Paper className={classes.paper}>\n          <CodeSnippet\n            title=\"Install\"\n            text=\"npm install react-validation-hook\"\n          />\n          <CodeSnippet\n            title=\"Usage\"\n            text={`\n                  import {\n                    useValidator,\n                    requiredValidation,\n                    lengthValidation,\n                    asyncValidation\n                  } from \"react-validation-hook\";`}\n          />\n        </Paper>\n      </Grid>\n      <Grid item container xs={12} md={12}>\n        <Grid item xs={12} md={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              Demo validations\n            </Typography>\n            <List>\n              <ListItem>\n                <ListItemText primary=\"1. Required validation\"></ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemText\n                  primary=\"2. Asynchronous validation, which involves calling https://jsonplaceholder.typicode.com/photos\n              and verifying the number or photos returned!\"\n                ></ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"3. Input length validation\"></ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"4. Custom synchronous validation which restricts character 'a' in the input\"></ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"5. A RegEx validation (pattern : ^[a-z]+$) which restricts any character other than a-z in the input\"></ListItemText>\n              </ListItem>\n            </List>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Paper className={classes.paper}>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n              Demo\n            </Typography>\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              label=\"User Input\"\n              onChange={onChange(changeHandler)}\n              helperText={\n                error.length ? error.map((err, idx) => <div key={idx}>{err}</div>) : \"\"\n              }\n              error={error.length ? true : false}\n            ></TextField>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={12}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            Documentation\n          </Typography>\n          <Typography color=\"textPrimary\">\n            WIP\n          </Typography>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}